(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun M6 () BagInt)
(declare-fun M7 () BagInt)
(declare-fun M8 () BagInt)
(declare-fun M9 () BagInt)
(declare-fun M10 () BagInt)
(declare-fun M11 () BagInt)
(declare-fun M12 () BagInt)
(declare-fun key () Int)
(declare-fun keymin () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun d3 () Int)
(declare-fun d4 () Int)
(declare-fun ?M2_31 () BagInt)
(declare-fun ?M32 () BagInt)
(declare-fun ?M42 () BagInt)
(declare-fun ?d2 () Int)
(assert (and 
 	(= M6 (bagunion (bag d4 ) M11 M12 ) )
 	(< M11 (bag d4 ) )
 	(< (bag d4 ) M12 )
 	(< M5 (bag key ) )
 	(< (bag d2 ) (bagunion M8 (bag keymin ) ) )
 	(= M9 (bagminus (bagunion (bag d3 ) M6 M7 ) (bag keymin ) ) )
 	(< M6 (bag d3 ) )
 	(< (bag d3 ) M7 )
 	(= M4 (bagunion (bag key ) M5 M8 (bag keymin ) ) )
 	(subset (bag key ) M0 )
 	(= M1 (bagminus M0 (bag key ) ) )
 	(= M2 (bagminus (bagunion (bag d1 ) M3 M4 ) (bag key ) ) )
 	(< M3 (bag d1 ) )
 	(< (bag d1 ) M4 )
 	(< d1 key )
 	(subset (bag keymin ) M6 )
 	(<= (bag keymin ) M6 )
 	(= M10 (bagminus M6 (bag keymin ) ) )
 )
 ) 
 (assert (not 
(and 
 	(= M9 (bagunion (bag d3 ) M10 M7 ) )
 	(< M10 (bag d3 ) )
 	(< (bag d3 ) M7 )
 	(< M5 (bag key ) )
 	(< (bag key ) (bagunion M8 (bag keymin ) ) )
 	(= M10 (bagminus (bagunion (bag d4 ) M11 M12 ) (bag keymin ) ) )
 	(< M11 (bag d4 ) )
 	(< (bag d4 ) M12 )
 	(= M3 (bagunion (bag key ) M5 M8 (bag keymin ) ) )
 	(subset (bag key ) M0 )
 	(= M1 (bagminus M0 (bag key ) ) )
 	(= M2 (bagminus (bagunion (bag d1 ) M3 M4 ) (bag key ) ) )
 	(< M3 (bag d1 ) )
 	(< (bag d1 ) M4 )
 	(< d1 key )
 	(subset (bag keymin ) M11 )
 	(<= (bag keymin ) M11 )
 )
 ) 
)
(check-sat)
