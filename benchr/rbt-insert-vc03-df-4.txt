(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun M6 () BagInt)
(declare-fun M7 () BagInt)
(declare-fun M8 () BagInt)
(declare-fun M9 () BagInt)
(declare-fun M10 () BagInt)
(declare-fun M11 () BagInt)
(declare-fun M12 () BagInt)
(declare-fun M13 () BagInt)
(declare-fun M14 () BagInt)
(declare-fun M15 () BagInt)
(declare-fun N1 () Int)
(declare-fun N2 () Int)
(declare-fun N3 () Int)
(declare-fun N4 () Int)
(declare-fun N5 () Int)
(declare-fun N6 () Int)
(declare-fun N7 () Int)
(declare-fun N8 () Int)
(declare-fun N9 () Int)
(declare-fun N10 () Int)
(declare-fun N11 () Int)
(declare-fun N12 () Int)
(declare-fun N13 () Int)
(declare-fun N14 () Int)
(declare-fun N15 () Int)
(declare-fun n1 () Int)
(declare-fun n2 () Int)
(declare-fun n3 () Int)
(declare-fun n4 () Int)
(declare-fun n5 () Int)
(declare-fun n6 () Int)
(declare-fun n7 () Int)
(declare-fun n8 () Int)
(declare-fun n9 () Int)
(declare-fun n10 () Int)
(declare-fun iseven () Int)
(declare-fun C1 () Int)
(declare-fun C2 () Int)
(declare-fun C3 () Int)
(declare-fun C4 () Int)
(declare-fun C5 () Int)
(declare-fun C6 () Int)
(declare-fun C7 () Int)
(declare-fun C8 () Int)
(declare-fun C9 () Int)
(declare-fun C10 () Int)
(declare-fun C11 () Int)
(declare-fun C12 () Int)
(declare-fun C13 () Int)
(declare-fun C14 () Int)
(declare-fun C15 () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun d3 () Int)
(declare-fun d4 () Int)
(declare-fun d5 () Int)
(declare-fun d6 () Int)
(declare-fun d7 () Int)
(declare-fun d8 () Int)
(declare-fun c1 () Int)
(declare-fun c2 () Int)
(declare-fun c3 () Int)
(declare-fun c4 () Int)
(declare-fun c5 () Int)
(declare-fun c6 () Int)
(declare-fun c7 () Int)
(declare-fun c8 () Int)
(declare-fun key () Int)
(assert (and 
 	(< M5 (bag d4 ) )
 	(< (bag d4 ) M7 )
 	(<= 0 c4 )
 	(<= c4 1 )
 	(=> (= c4 0 )(= C5 1 ))
 	(=> (= c4 0 )(= C7 1 ))
 	(< (bagunion (bag d4 ) M5 M7 ) (bag d3 ) )
 	(< (bag d3 ) M6 )
 	(<= 0 C1 )
 	(<= C1 1 )
 	(= N6 (ite (= c4 0 ) N7 (+ N7 1 ) ) )
 	(=> (= C1 0 )(= c4 1 ))
 	(=> (= C1 0 )(= C6 1 ))
 	(= M1 (bagunion (bag d3 ) M6 (bag d4 ) M5 M7 ) )
 	(= N1 (ite (= C1 0 ) N6 (+ N6 1 ) ) )
 	(< key d2 )
 	(< (bag d2 ) M4 )
 	(= N4 1 )
 	(<= 0 C2 )
 	(<= C2 1 )
 	(=> (= C2 0 )(= C4 1 ))
 	(= M2 (bagunion (bag d2 ) (bag key ) M4 ) )
 	(= N2 (ite (= C2 0 ) N4 (+ N4 1 ) ) )
 	(< M1 (bag d1 ) )
 	(< (bag d1 ) M3 )
 	(= c1 1 )
 	(= (bagunion M0 (bag key ) ) (bagunion (bag d1 ) M1 M3 ) )
 	(= M0 (bagminus M0 (bag key ) ) )
 	(= iseven 1 )
 	(= c5 0 )
 	(= N1 N3 )
 	(= N5 N7 )
 )
 ) 
 (assert (not 
(and 
 	(< key d2 )
 	(< (bag d2 ) M4 )
 	(= N4 1 )
 	(<= 0 C2 )
 	(<= C2 1 )
 	(=> (= C2 0 )(= C4 1 ))
 	(= M2 (bagunion (bag d2 ) (bag key ) M4 ) )
 	(= N2 (ite (= C2 0 ) N4 (+ N4 1 ) ) )
 	(< M5 (bag d4 ) )
 	(< (bag d4 ) M7 )
 	(<= 0 c4 )
 	(<= c4 1 )
 	(=> (= c4 0 )(= C5 1 ))
 	(=> (= c4 0 )(= C7 1 ))
 	(< (bagunion (bag d4 ) M5 M7 ) (bag d3 ) )
 	(< (bag d3 ) M6 )
 	(<= 0 C1 )
 	(<= C1 1 )
 	(= N6 (ite (= c4 0 ) N5 (+ N5 1 ) ) )
 	(=> (= C1 0 )(= c4 1 ))
 	(=> (= C1 0 )(= C6 1 ))
 	(< (bagunion (bag d4 ) M5 M7 (bag d3 ) M6 ) (bag d1 ) )
 	(< (bag d1 ) M3 )
 	(= c1 1 )
 	(= N1 (ite (= C1 0 ) N6 (+ N6 1 ) ) )
 	(= (bagunion M0 (bag key ) ) (bagunion (bag d4 ) M5 M7 (bag d3 ) M6 (bag d1 ) M3 ) )
 	(= M0 (bagminus M0 (bag key ) ) )
 	(= c5 0 )
 	(= N5 N5 )
 )
 ) 
)
(check-sat)
