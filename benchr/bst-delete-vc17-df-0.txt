(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun M6 () BagInt)
(declare-fun M7 () BagInt)
(declare-fun M8 () BagInt)
(declare-fun M9 () BagInt)
(declare-fun key () Int)
(declare-fun keymin () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun d3 () Int)
(declare-fun ?M2_31 () BagInt)
(declare-fun ?M32 () BagInt)
(declare-fun ?M42 () BagInt)
(declare-fun ?d2 () Int)
(assert (and 
 	(= M3 (bagunion (bag d3 ) M8 M9 ) )
 	(< M8 (bag d3 ) )
 	(< (bag d3 ) M9 )
 	(= M6 (bagminus (bagunion (bag d2 ) M3 M4 ) (bag keymin ) ) )
 	(< M3 (bag d2 ) )
 	(< (bag d2 ) M4 )
 	(= M0 (bagunion (bag key ) M1 M5 (bag keymin ) ) )
 	(< M1 (bag key ) )
 	(< (bag key ) (bagunion M5 (bag keymin ) ) )
 	(subset (bag keymin ) M3 )
 	(<= (bag keymin ) M3 )
 	(= M7 (bagminus (bagunion (bag d3 ) M8 M9 ) (bag keymin ) ) )
 )
 ) 
 (assert (not 
(and 
 	(= M6 (bagunion (bag d2 ) M7 M4 ) )
 	(< M7 (bag d2 ) )
 	(< (bag d2 ) M4 )
 	(= M7 (bagminus (bagunion (bag d3 ) M8 M9 ) (bag keymin ) ) )
 	(< M8 (bag d3 ) )
 	(< (bag d3 ) M9 )
 	(= M0 (bagunion (bag key ) M1 M5 (bag keymin ) ) )
 	(< M1 (bag key ) )
 	(< (bag key ) (bagunion M5 (bag keymin ) ) )
 	(subset (bag keymin ) M8 )
 	(<= (bag keymin ) M8 )
 )
 ) 
)
(check-sat)
