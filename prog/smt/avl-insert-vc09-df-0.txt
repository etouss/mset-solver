(set-logic QF_UFLIA)
(define-fun max ((x Int) (y Int)) Int (ite (< x y) y x))
(define-fun min ((x Int) (y Int)) Int (ite (> x y) y x))

(declare-fun emptybag (Int) Int)
(declare-fun M0 (Int) Int)
(declare-fun M1 (Int) Int)
(declare-fun M2 (Int) Int)
(declare-fun H1 () Int)
(declare-fun H2 () Int)
(declare-fun d1 () Int)
(declare-fun b1 () Int)
(declare-fun b2 () Int)
(declare-fun key () Int)
(declare-fun bagmaxM1 () Int)
(declare-fun bagminM2 () Int)
(declare-fun BAGd1 (Int) Int)
(declare-fun bagmaxM2 () Int)
(declare-fun BAGd1UNIONM2UNIONneqM0 () Int)
(declare-fun BAGkey (Int) Int)
(declare-fun M0MINUSBAGkeyMINUSneqM0 () Int)


(assert (and
	(and
		(= (M1 d1 ) (emptybag d1 ) )
		(= (M1 key ) (emptybag key ) )
		(= (M1 bagmaxM1 ) (emptybag bagmaxM1 ) )
		(= (M1 bagminM2 ) (emptybag bagminM2 ) )
		(= (M1 bagmaxM2 ) (emptybag bagmaxM2 ) )
		(= (M1 BAGd1UNIONM2UNIONneqM0 ) (emptybag BAGd1UNIONM2UNIONneqM0 ) )
		(= (M1 M0MINUSBAGkeyMINUSneqM0 ) (emptybag M0MINUSBAGkeyMINUSneqM0 ) )
	)
	(= H1 0 )
	(< bagmaxM1 d1 )
	(< d1 bagminM2 )
	(= b1 (- H2 H1 ) )
	(<= (- 0 1 ) b1 )
	(<= b1 1 )
	(and
		(= (M0 d1 ) (max (BAGd1 d1 ) (max (M1 d1 ) (M2 d1 ) ) ) )
		(= (M0 key ) (max (BAGd1 key ) (max (M1 key ) (M2 key ) ) ) )
		(= (M0 bagmaxM1 ) (max (BAGd1 bagmaxM1 ) (max (M1 bagmaxM1 ) (M2 bagmaxM1 ) ) ) )
		(= (M0 bagminM2 ) (max (BAGd1 bagminM2 ) (max (M1 bagminM2 ) (M2 bagminM2 ) ) ) )
		(= (M0 bagmaxM2 ) (max (BAGd1 bagmaxM2 ) (max (M1 bagmaxM2 ) (M2 bagmaxM2 ) ) ) )
		(= (M0 BAGd1UNIONM2UNIONneqM0 ) (max (BAGd1 BAGd1UNIONM2UNIONneqM0 ) (max (M1 BAGd1UNIONM2UNIONneqM0 ) (M2 BAGd1UNIONM2UNIONneqM0 ) ) ) )
		(= (M0 M0MINUSBAGkeyMINUSneqM0 ) (max (BAGd1 M0MINUSBAGkeyMINUSneqM0 ) (max (M1 M0MINUSBAGkeyMINUSneqM0 ) (M2 M0MINUSBAGkeyMINUSneqM0 ) ) ) )
	)
	(or
 		(= (M0 key ) 0 )
		(>= (M1 key ) 1 )
	)
	(or
 		(= (M1 key ) 0 )
		(>= (M0 key ) 1 )
	)
	(> d1 key )
	(= b2 0 )
))
(assert (or
 	(distinct b1 b1 )
	(>= d1 bagmaxM2 )
	(> (- 0 1 ) b1 )
	(> b1 1 )
	(distinct (M0 nil ) ((bagunion BAGd1 M2 ) nil ) )
	(<= d1 key )
	(distinct b2 0 )
	(distinct (M0 nil ) ((bagminus M0 BAGkey ) nil ) )
	(distinct H2 b1 )
))
(assert (and
	(>= (M1 bagmaxM1 ) 1 )
	(=>
		(> d1 bagmaxM1 )
		(= (M1 d1 ) 0 ))
	(=>
		(> key bagmaxM1 )
		(= (M1 key ) 0 ))
	(=>
		(> bagminM2 bagmaxM1 )
		(= (M1 bagminM2 ) 0 ))
	(=>
		(> bagmaxM2 bagmaxM1 )
		(= (M1 bagmaxM2 ) 0 ))
	(=>
		(> BAGd1UNIONM2UNIONneqM0 bagmaxM1 )
		(= (M1 BAGd1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(> M0MINUSBAGkeyMINUSneqM0 bagmaxM1 )
		(= (M1 M0MINUSBAGkeyMINUSneqM0 ) 0 ))
))
(assert (and
	(>= (M2 bagminM2 ) 1 )
	(=>
		(< d1 bagminM2 )
		(= (M2 d1 ) 0 ))
	(=>
		(< key bagminM2 )
		(= (M2 key ) 0 ))
	(=>
		(< bagmaxM1 bagminM2 )
		(= (M2 bagmaxM1 ) 0 ))
	(=>
		(< bagmaxM2 bagminM2 )
		(= (M2 bagmaxM2 ) 0 ))
	(=>
		(< BAGd1UNIONM2UNIONneqM0 bagminM2 )
		(= (M2 BAGd1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(< M0MINUSBAGkeyMINUSneqM0 bagminM2 )
		(= (M2 M0MINUSBAGkeyMINUSneqM0 ) 0 ))
))
(assert (and
	(= (BAGd1 d1 ) 1 )
	(=>
		(distinct d1 key )
		(= (BAGd1 key ) 0 ))
	(=>
		(distinct d1 bagmaxM1 )
		(= (BAGd1 bagmaxM1 ) 0 ))
	(=>
		(distinct d1 bagminM2 )
		(= (BAGd1 bagminM2 ) 0 ))
	(=>
		(distinct d1 bagmaxM2 )
		(= (BAGd1 bagmaxM2 ) 0 ))
	(=>
		(distinct d1 BAGd1UNIONM2UNIONneqM0 )
		(= (BAGd1 BAGd1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(distinct d1 M0MINUSBAGkeyMINUSneqM0 )
		(= (BAGd1 M0MINUSBAGkeyMINUSneqM0 ) 0 ))
))
(assert (and
	(>= (M2 bagmaxM2 ) 1 )
	(=>
		(> d1 bagmaxM2 )
		(= (M2 d1 ) 0 ))
	(=>
		(> key bagmaxM2 )
		(= (M2 key ) 0 ))
	(=>
		(> bagmaxM1 bagmaxM2 )
		(= (M2 bagmaxM1 ) 0 ))
	(=>
		(> bagminM2 bagmaxM2 )
		(= (M2 bagminM2 ) 0 ))
	(=>
		(> BAGd1UNIONM2UNIONneqM0 bagmaxM2 )
		(= (M2 BAGd1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(> M0MINUSBAGkeyMINUSneqM0 bagmaxM2 )
		(= (M2 M0MINUSBAGkeyMINUSneqM0 ) 0 ))
))
(assert (and
	(= (BAGkey key ) 1 )
	(=>
		(distinct key d1 )
		(= (BAGkey d1 ) 0 ))
	(=>
		(distinct key bagmaxM1 )
		(= (BAGkey bagmaxM1 ) 0 ))
	(=>
		(distinct key bagminM2 )
		(= (BAGkey bagminM2 ) 0 ))
	(=>
		(distinct key bagmaxM2 )
		(= (BAGkey bagmaxM2 ) 0 ))
	(=>
		(distinct key BAGd1UNIONM2UNIONneqM0 )
		(= (BAGkey BAGd1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(distinct key M0MINUSBAGkeyMINUSneqM0 )
		(= (BAGkey M0MINUSBAGkeyMINUSneqM0 ) 0 ))
))
(assert (and 

(= (emptybag d1 ) 0 )

(>= (M0 d1 ) 0 )

(>= (M1 d1 ) 0 )

(>= (M2 d1 ) 0 )

(>= (BAGd1 d1 ) 0 )

(>= (BAGkey d1 ) 0 )

(= (emptybag key ) 0 )

(>= (M0 key ) 0 )

(>= (M1 key ) 0 )

(>= (M2 key ) 0 )

(>= (BAGd1 key ) 0 )

(>= (BAGkey key ) 0 )

(= (emptybag bagmaxM1 ) 0 )

(>= (M0 bagmaxM1 ) 0 )

(>= (M1 bagmaxM1 ) 0 )

(>= (M2 bagmaxM1 ) 0 )

(>= (BAGd1 bagmaxM1 ) 0 )

(>= (BAGkey bagmaxM1 ) 0 )

(= (emptybag bagminM2 ) 0 )

(>= (M0 bagminM2 ) 0 )

(>= (M1 bagminM2 ) 0 )

(>= (M2 bagminM2 ) 0 )

(>= (BAGd1 bagminM2 ) 0 )

(>= (BAGkey bagminM2 ) 0 )

(= (emptybag bagmaxM2 ) 0 )

(>= (M0 bagmaxM2 ) 0 )

(>= (M1 bagmaxM2 ) 0 )

(>= (M2 bagmaxM2 ) 0 )

(>= (BAGd1 bagmaxM2 ) 0 )

(>= (BAGkey bagmaxM2 ) 0 )

(= (emptybag BAGd1UNIONM2UNIONneqM0 ) 0 )

(>= (M0 BAGd1UNIONM2UNIONneqM0 ) 0 )

(>= (M1 BAGd1UNIONM2UNIONneqM0 ) 0 )

(>= (M2 BAGd1UNIONM2UNIONneqM0 ) 0 )

(>= (BAGd1 BAGd1UNIONM2UNIONneqM0 ) 0 )

(>= (BAGkey BAGd1UNIONM2UNIONneqM0 ) 0 )

(= (emptybag M0MINUSBAGkeyMINUSneqM0 ) 0 )

(>= (M0 M0MINUSBAGkeyMINUSneqM0 ) 0 )

(>= (M1 M0MINUSBAGkeyMINUSneqM0 ) 0 )

(>= (M2 M0MINUSBAGkeyMINUSneqM0 ) 0 )

(>= (BAGd1 M0MINUSBAGkeyMINUSneqM0 ) 0 )

(>= (BAGkey M0MINUSBAGkeyMINUSneqM0 ) 0 )

))
(check-sat)