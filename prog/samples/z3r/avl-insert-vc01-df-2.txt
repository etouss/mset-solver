(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun M6 () BagInt)
(declare-fun M7 () BagInt)
(declare-fun H1 () Int)
(declare-fun H2 () Int)
(declare-fun H3 () Int)
(declare-fun H4 () Int)
(declare-fun H5 () Int)
(declare-fun H6 () Int)
(declare-fun H7 () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun b1 () Int)
(declare-fun b2 () Int)
(declare-fun key () Int)
(assert (and 
 	(= M1 (bagunion (bag d2 ) M6 M7 ) )
 	(< M6 (bag d2 ) )
 	(< (bag d2 ) M7 )
 	(= H1 (ite (> H7 H6 ) (+ H7 1 ) (+ H6 1 ) ) )
 	(= b2 (- H7 H6 ) )
 	(<= (- 0 1 ) b2 )
 	(<= b2 1 )
 	(< M1 (bag d1 ) )
 	(< (bag d1 ) M2 )
 	(= b1 (- H2 H1 ) )
 	(<= (- 0 1 ) b1 )
 	(<= b1 1 )
 	(= M0 (bagunion (bag d1 ) M1 M2 ) )
 	(=> (subset (bag key ) M0 )(subset (bag key ) M1 ))
 	(=> (subset (bag key ) M1 )(subset (bag key ) M0 ))
 	(> d1 key )
 	(<> b2 0 )
 	(> d2 key )
 	(= M4 (ite (subset (bag key ) M1 ) M0 (bagunion M0 (bag key ) ) ) )
 	(= M3 M4 )
 	(= H3 H4 )
 )
 ) 
 (assert (not 
(and 
 	(< M6 (bag d2 ) )
 	(< (bag d2 ) M7 )
 	(= b2 (- H7 H6 ) )
 	(<= (- 0 1 ) b2 )
 	(<= b2 1 )
 	(= M3 (ite (subset (bag key ) M6 ) (bagunion (bag d1 ) (bag d2 ) M6 M7 M2 ) (bagunion (bag d1 ) (bag d2 ) M6 M7 M2 (bag key ) ) ) )
 	(= H1 (ite (> H7 H6 ) (+ H7 1 ) (+ H6 1 ) ) )
 	(= H3 (ite (> H2 H1 ) (+ H2 1 ) (+ H1 1 ) ) )
 	(< (bagunion (bag d2 ) M6 M7 ) (bag d1 ) )
 	(< (bag d1 ) M2 )
 	(= b1 (- H2 H1 ) )
 	(<= (- 0 1 ) b1 )
 	(<= b1 1 )
 	(= M3 (ite (subset (bag key ) M0 ) M0 (bagunion M0 (bag key ) ) ) )
 	(=> (subset (bag key ) M0 )(subset (bag key ) M6 ))
 	(=> (subset (bag key ) M6 )(subset (bag key ) M0 ))
 	(> d1 key )
 	(> d2 key )
 	(<> b2 0 )
 )
 ) 
)
(check-sat)
