(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun key () Int)
(declare-fun ret () Int)
(declare-fun d () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun ?M2_31 () BagInt)
(declare-fun ?M32 () BagInt)
(declare-fun ?d2 () Int)
(assert (and 
 	(= M3 (bagunion M5 (bag d2 ) ) )
 	(<= (bag d2 ) M5 )
 	(<= (bag d1 ) M3 )
 	(=> (subset (bag key ) M0 )(subset (bag key ) M3 ))
 	(=> (subset (bag key ) M3 )(subset (bag key ) M0 ))
 	(= M2 (ite (subset (bag key ) M3 ) (bagunion M3 (bag d1 ) ) (bagunion M3 (bag d1 ) (bag key ) ) ) )
 	(= M1 (ite (subset (bag key ) M0 ) M0 (bagunion M0 (bag key ) ) ) )
 	(< d2 key )
 	(= M2 (bagunion (bag d1 ) M4 ) )
 )
 ) 
 (assert (not 
(and 
 	(= M2 (bagunion (bag d1 ) M4 ) )
 	(<= (bag d1 ) M4 )
 	(<= (bag d2 ) M5 )
 	(=> (subset (bag key ) M0 )(subset (bag key ) M5 ))
 	(=> (subset (bag key ) M5 )(subset (bag key ) M0 ))
 	(= M4 (ite (subset (bag key ) M5 ) (bagunion M5 (bag d2 ) ) (bagunion M5 (bag d2 ) (bag key ) ) ) )
 	(= M1 (ite (subset (bag key ) M0 ) M0 (bagunion M0 (bag key ) ) ) )
 )
 ) 
)
(check-sat)
