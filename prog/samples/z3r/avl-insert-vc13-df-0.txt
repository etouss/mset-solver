(set-logic QF_SLRDI)
(declare-fun emptybag () BagInt)(declare-fun M0 () BagInt)
(declare-fun M1 () BagInt)
(declare-fun M2 () BagInt)
(declare-fun M3 () BagInt)
(declare-fun M4 () BagInt)
(declare-fun M5 () BagInt)
(declare-fun M6 () BagInt)
(declare-fun M7 () BagInt)
(declare-fun M8 () BagInt)
(declare-fun M9 () BagInt)
(declare-fun M10 () BagInt)
(declare-fun M11 () BagInt)
(declare-fun H1 () Int)
(declare-fun H2 () Int)
(declare-fun H3 () Int)
(declare-fun H4 () Int)
(declare-fun H5 () Int)
(declare-fun H6 () Int)
(declare-fun H7 () Int)
(declare-fun H8 () Int)
(declare-fun H9 () Int)
(declare-fun H10 () Int)
(declare-fun H11 () Int)
(declare-fun h () Int)
(declare-fun d1 () Int)
(declare-fun d2 () Int)
(declare-fun d3 () Int)
(declare-fun d4 () Int)
(declare-fun b1 () Int)
(declare-fun b2 () Int)
(declare-fun b3 () Int)
(declare-fun b4 () Int)
(declare-fun key () Int)
(assert (and 
 	(< (bag d1 ) M2 )
 	(<= (- 0 1 ) b1 )
 	(<= b1 1 )
 	(= M0 (bagunion (bag d1 ) M2 ) )
 	(> d1 key )
 	(= M0 (bagminus M0 (bag key ) ) )
 	(= b2 (- b1 1 ) )
 	(= b3 0 )
 	(= H2 b1 )
 )
 ) 
 (assert (not 
(and 
 	(< (bag d1 ) M2 )
 	(= b2 (- H2 1 ) )
 	(= M0 (bagunion (bag d1 ) M2 ) )
 	(> d1 key )
 	(= M0 (bagminus M0 (bag key ) ) )
 	(= b3 0 )
 )
 ) 
)
(check-sat)
