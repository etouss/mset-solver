(set-logic QF_UFLIA)
(define-fun max ((x Int) (y Int)) Int (ite (< x y) y x))
(define-fun min ((x Int) (y Int)) Int (ite (> x y) y x))

(declare-fun M0 (Int) Int)
(declare-fun M1 (Int) Int)
(declare-fun M2 (Int) Int)
(declare-fun key () Int)
(declare-fun d () Int)
(declare-fun BAGd (Int) Int)
(declare-fun bagmaxM1 () Int)
(declare-fun bagminM2 () Int)
(declare-fun BAGdUNIONM1UNIONM2UNIONneqM0 () Int)
(declare-fun bagminM1 () Int)
(declare-fun bagmaxM2 () Int)


(assert (and
	(and
		(= (M0 key ) (max (BAGd key ) (max (M1 key ) (M2 key ) ) ) )
		(= (M0 d ) (max (BAGd d ) (max (M1 d ) (M2 d ) ) ) )
		(= (M0 bagmaxM1 ) (max (BAGd bagmaxM1 ) (max (M1 bagmaxM1 ) (M2 bagmaxM1 ) ) ) )
		(= (M0 bagminM2 ) (max (BAGd bagminM2 ) (max (M1 bagminM2 ) (M2 bagminM2 ) ) ) )
		(= (M0 BAGdUNIONM1UNIONM2UNIONneqM0 ) (max (BAGd BAGdUNIONM1UNIONM2UNIONneqM0 ) (max (M1 BAGdUNIONM1UNIONM2UNIONneqM0 ) (M2 BAGdUNIONM1UNIONM2UNIONneqM0 ) ) ) )
		(= (M0 bagminM1 ) (max (BAGd bagminM1 ) (max (M1 bagminM1 ) (M2 bagminM1 ) ) ) )
		(= (M0 bagmaxM2 ) (max (BAGd bagmaxM2 ) (max (M1 bagmaxM2 ) (M2 bagmaxM2 ) ) ) )
	)
	(< bagmaxM1 d )
	(< d bagminM2 )
	(> d key )
))
(assert (or
 	(distinct (M0 nil ) ((bagunion BAGd M1 M2 ) nil ) )
	(>= bagminM1 d )
	(>= d bagmaxM2 )
	(and
		(>= (M0 key ) 1 )
		(= (M1 key ) 0 )
	)
	(and
		(>= (M1 key ) 1 )
		(= (M0 key ) 0 )
	)
))
(assert (and
	(= (BAGd d ) 1 )
	(=>
		(distinct d key )
		(= (BAGd key ) 0 ))
	(=>
		(distinct d bagmaxM1 )
		(= (BAGd bagmaxM1 ) 0 ))
	(=>
		(distinct d bagminM2 )
		(= (BAGd bagminM2 ) 0 ))
	(=>
		(distinct d BAGdUNIONM1UNIONM2UNIONneqM0 )
		(= (BAGd BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(distinct d bagminM1 )
		(= (BAGd bagminM1 ) 0 ))
	(=>
		(distinct d bagmaxM2 )
		(= (BAGd bagmaxM2 ) 0 ))
))
(assert (and
	(>= (M1 bagmaxM1 ) 1 )
	(=>
		(> key bagmaxM1 )
		(= (M1 key ) 0 ))
	(=>
		(> d bagmaxM1 )
		(= (M1 d ) 0 ))
	(=>
		(> bagminM2 bagmaxM1 )
		(= (M1 bagminM2 ) 0 ))
	(=>
		(> BAGdUNIONM1UNIONM2UNIONneqM0 bagmaxM1 )
		(= (M1 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(> bagminM1 bagmaxM1 )
		(= (M1 bagminM1 ) 0 ))
	(=>
		(> bagmaxM2 bagmaxM1 )
		(= (M1 bagmaxM2 ) 0 ))
))
(assert (and
	(>= (M2 bagminM2 ) 1 )
	(=>
		(< key bagminM2 )
		(= (M2 key ) 0 ))
	(=>
		(< d bagminM2 )
		(= (M2 d ) 0 ))
	(=>
		(< bagmaxM1 bagminM2 )
		(= (M2 bagmaxM1 ) 0 ))
	(=>
		(< BAGdUNIONM1UNIONM2UNIONneqM0 bagminM2 )
		(= (M2 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(< bagminM1 bagminM2 )
		(= (M2 bagminM1 ) 0 ))
	(=>
		(< bagmaxM2 bagminM2 )
		(= (M2 bagmaxM2 ) 0 ))
))
(assert (and
	(>= (M1 bagminM1 ) 1 )
	(=>
		(< key bagminM1 )
		(= (M1 key ) 0 ))
	(=>
		(< d bagminM1 )
		(= (M1 d ) 0 ))
	(=>
		(< bagmaxM1 bagminM1 )
		(= (M1 bagmaxM1 ) 0 ))
	(=>
		(< bagminM2 bagminM1 )
		(= (M1 bagminM2 ) 0 ))
	(=>
		(< BAGdUNIONM1UNIONM2UNIONneqM0 bagminM1 )
		(= (M1 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(< bagmaxM2 bagminM1 )
		(= (M1 bagmaxM2 ) 0 ))
))
(assert (and
	(>= (M2 bagmaxM2 ) 1 )
	(=>
		(> key bagmaxM2 )
		(= (M2 key ) 0 ))
	(=>
		(> d bagmaxM2 )
		(= (M2 d ) 0 ))
	(=>
		(> bagmaxM1 bagmaxM2 )
		(= (M2 bagmaxM1 ) 0 ))
	(=>
		(> bagminM2 bagmaxM2 )
		(= (M2 bagminM2 ) 0 ))
	(=>
		(> BAGdUNIONM1UNIONM2UNIONneqM0 bagmaxM2 )
		(= (M2 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 ))
	(=>
		(> bagminM1 bagmaxM2 )
		(= (M2 bagminM1 ) 0 ))
))
(assert (and 

(>= (M0 key ) 0 )

(>= (M1 key ) 0 )

(>= (M2 key ) 0 )

(>= (BAGd key ) 0 )

(>= (M0 d ) 0 )

(>= (M1 d ) 0 )

(>= (M2 d ) 0 )

(>= (BAGd d ) 0 )

(>= (M0 bagmaxM1 ) 0 )

(>= (M1 bagmaxM1 ) 0 )

(>= (M2 bagmaxM1 ) 0 )

(>= (BAGd bagmaxM1 ) 0 )

(>= (M0 bagminM2 ) 0 )

(>= (M1 bagminM2 ) 0 )

(>= (M2 bagminM2 ) 0 )

(>= (BAGd bagminM2 ) 0 )

(>= (M0 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 )

(>= (M1 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 )

(>= (M2 BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 )

(>= (BAGd BAGdUNIONM1UNIONM2UNIONneqM0 ) 0 )

(>= (M0 bagminM1 ) 0 )

(>= (M1 bagminM1 ) 0 )

(>= (M2 bagminM1 ) 0 )

(>= (BAGd bagminM1 ) 0 )

(>= (M0 bagmaxM2 ) 0 )

(>= (M1 bagmaxM2 ) 0 )

(>= (M2 bagmaxM2 ) 0 )

(>= (BAGd bagmaxM2 ) 0 )

))
(check-sat)